Секции:
section      .data 			(для объявления констант) - не пригодится
section 	 .bss			(для объяления переменных) - не пригодится
section      .text			(для хранения кода) - единственное что пригодится

____________________________
Директивы:
global                      (основная, указывает на начальную метку)
                            # global    _ft_strlen
extern                      (объявляем внешнюю функцию с которой компилируем 
								или если берем из библиотеки)
                            # extern    _ft_strcpy
							# extern    _malloc
							# extern	___error

____________________________
Регистры:
rax							(возвращаемый регистр, используй ret. также получает 
								значение из внешних функций)
rdi							(1 аргумент, также передает данные в др функции)
rsi							(2 аргумент, также передает данные в др функции)
rdx							(3 аргумент, также передает данные в др функции)
rcx							(4 аргумент, желательно использовать как счетчик в цикле)
r8							(5 аргумент)
r9							(6 аргумент)

Деление регистра rax:   rax(64) -> eax(32) -> ax(16) -> ah(8) & al(8) (пригодится только al для char)

____________________________
Инструкции:
mov x, y      	            x = y
add x, y	                x = x + y
sub x, y	                x = x - y
inc x	                    x++
dec x	                    x--
[rdi]						(разыменование регистра rdi)
byte[rdi]					(разыменование по адресу младшего байта(исп для символа))
							# byte[rdi + rax] - обращение по адресу младшего байта,
											к адресу прибавляется значение из регистра rax
movsx						(копирование из операнда меньшего размера в операнд большего)
							#movsx rax, byte[rdi] - копирование символа в регистра rax		
push                        (отправляем данные на стек)
pop                         (берем данные из стека)
loop:                       (цикл. чтобы выйти из цикла используй cmp)
cmp							(сравнение, смотри cmp ниже)
syscall                     (системный вызов (read, write) используй регистр rax)
jc							(ошибка системного вызова, смотри ниже системные вызовы)
call                        (вызов функции (malloc, ft_strlen, ft_strcmp, ___error))
ret                         return (возвращаем данные из регистра rax,  \
                            если не используем в конце функции syscall exit, должен быть ret)

____________________________
jmp (label)     ; Безусловный прыжок - прыгаем без условий
#  jmp loop
#  jmp end
#  jmp epicfail


____________________________
cmp             ; Условный прыжок - прыгаем только если соблюдается условие

Условия:

je	label	    ; (прыгаем если равно)
jne label       ; (прыгаем если неравно)
jl label        ; (прыгаем если меньше < VALUE)
jle label       ; (прыгаем если меньше/равно <= VALUE)
jz label        ; (прыгаем если ноль == 0)
jnz label       ; (прыгаем если не ноль != 0)
jg label        ; (прыгаем если больше >)
jge label       ; (прыгаем если больше/равно >= VALUE)

____________________________
Системные вызовы которые нам нужны(остальные не нужны и я их не стал указывать)
Example of syscall:
mov rax, 0x2000004         ; system call for write
mov rax, 0x2000003	       ; system call for read
mov rax, 0x2000001         ; system call for exit

если произошла ошибка системного вызова используем инструкцию jc:
# jc epicfail                     	; в случае ошибки переходим в метку(label) epicfail

Example:
_ft_write:
			mov		rax, 0x2000004	; system call
			syscall					; write
			jc		error			; if write fail
			jmp		exit			;

error:
			push	rax				; push to stack
			call 	___error		;
			pop		r8				; receive from stack #error
			mov		[rax], r8		; address equal r8
			mov		rax, -1			; return (-1)
			ret 			

exit:
			ret
____________________________